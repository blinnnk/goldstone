package io.goldstone.blockchain.module.common.qrcode.view

import android.content.Context
import android.content.Intent
import android.graphics.Color
import android.graphics.Paint
import android.util.AttributeSet
import android.util.TypedValue
import android.view.Gravity
import android.view.KeyEvent
import android.widget.*
import com.blinnnk.extension.isNull
import com.blinnnk.extension.setAlignParentBottom
import com.blinnnk.extension.*
import com.blinnnk.uikit.uiPX
import com.google.zxing.MultiFormatReader
import com.google.zxing.ResultPoint
import com.google.zxing.client.android.*
import com.journeyapps.barcodescanner.*
import com.journeyapps.barcodescanner.camera.CameraParametersCallback
import com.journeyapps.barcodescanner.camera.CameraSettings
import io.goldstone.blockchain.common.utils.GoldStoneFont
import org.jetbrains.anko.*

/**
 * @date: 2018/9/13.
 * @author: yanglihai
 * @description:
 */
class DecoratedQRCodeView : RelativeLayout {
	var barcodeView: BarcodeView
	var finderView: QRCodeFinderView
	private var statusView: TextView
	
	private inner class WrappedCallback(private val delegate: BarcodeCallback) : BarcodeCallback {
		
		override fun barcodeResult(result: BarcodeResult) {
			delegate.barcodeResult(result)
		}
		
		override fun possibleResultPoints(resultPoints: List<ResultPoint>) {
			for (point in resultPoints) {
				finderView.addPossibleResultPoint(point)
			}
			delegate.possibleResultPoints(resultPoints)
		}
	}
	
	constructor(context: Context) : super(context)
	
	constructor(
		context: Context,
		attrs: AttributeSet
	) : super(
		context,
		attrs
	)
	
	constructor(
		context: Context,
		attrs: AttributeSet,
		defStyleAttr: Int
	) : super(
		context,
		attrs,
		defStyleAttr
	)
	
	init {
		barcodeView = BarcodeView(context).apply {
			layoutParams = RelativeLayout.LayoutParams(matchParent, matchParent)
		}
		finderView = QRCodeFinderView(context).apply {
			layoutParams = RelativeLayout.LayoutParams(matchParent, matchParent)
			setCameraPreview(barcodeView)
		}
		
		statusView = TextView(context).apply {
			setTextSize(TypedValue.COMPLEX_UNIT_SP, 13f)
			textColor = Color.WHITE
			typeface = GoldStoneFont.light(context)
			gravity = Gravity.CENTER_HORIZONTAL
			layoutParams = RelativeLayout.LayoutParams(matchParent, wrapContent).apply {
				alignParentBottom()
			}
			bottomPadding = 10.uiPX()
		}
		
		addView(barcodeView)
		addView(finderView)
		addView(statusView)
	}
	
	/**
	 * Convenience method to initialize camera id, decode formats and prompt message from an intent.
	 *
	 * @param intent the intent, as generated by IntentIntegrator
	 */
	fun initializeFromIntent(intent: Intent) {
		// Scan the formats the intent requested, and return the result to the calling activity.
		val decodeFormats = DecodeFormatManager.parseDecodeFormats(intent)
		val decodeHints = DecodeHintManager.parseDecodeHints(intent)
		val settings = CameraSettings()
		if (intent.hasExtra(Intents.Scan.CAMERA_ID)) {
			val cameraId = intent.getIntExtra(Intents.Scan.CAMERA_ID, -1)
			if (cameraId >= 0) {
				settings.requestedCameraId = cameraId
			}
		}
		val customPromptMessage = intent.getStringExtra(Intents.Scan.PROMPT_MESSAGE)
		if (customPromptMessage != null) {
			setStatusText(customPromptMessage)
		}
		
		// Check what type of scan. Default: normal scan
		val scanType = intent.getIntExtra(Intents.Scan.SCAN_TYPE, 0)
		val characterSet = intent.getStringExtra(Intents.Scan.CHARACTER_SET)
		val reader = MultiFormatReader()
		reader.setHints(decodeHints)
		barcodeView.cameraSettings = settings
		barcodeView.decoderFactory = DefaultDecoderFactory(
			decodeFormats,
			decodeHints,
			characterSet,
			scanType
		)
	}
	
	fun setStatusText(text: String) {
		// statusView is optional when using a custom layout
		if (!statusView.isNull()) {
			statusView.text = text
		}
	}
	
	/**
	 * @see BarcodeView.pause
	 */
	fun pause() {
		barcodeView.pause()
	}
	
	/**
	 * @see BarcodeView.pauseAndWait
	 */
	fun pauseAndWait() {
		barcodeView.pauseAndWait()
	}
	
	/**
	 * @see BarcodeView.resume
	 */
	fun resume() {
		barcodeView.resume()
	}
	
	/**
	 * @see BarcodeView.decodeSingle
	 */
	fun decodeSingle(callback: BarcodeCallback) {
		barcodeView.decodeSingle(WrappedCallback(callback))
	}
	
	/**
	 * @see BarcodeView.decodeContinuous
	 */
	fun decodeContinuous(callback: BarcodeCallback) {
		barcodeView.decodeContinuous(WrappedCallback(callback))
	}
	
	/**
	 * Turn on the device's flashlight.
	 */
	private fun setTorchOn() {
		barcodeView.setTorch(true)
	}
	
	/**
	 * Turn off the device's flashlight.
	 */
	private fun setTorchOff() {
		barcodeView.setTorch(false)
		
	}
	
	/**
	 * Changes the settings for Camera.
	 * Must be called after [.resume].
	 *
	 * @param callback [CameraParametersCallback]
	 */
	fun changeCameraParameters(callback: CameraParametersCallback) {
		barcodeView.changeCameraParameters(callback)
	}
	
	/**
	 * Handles focus, camera, volume up and volume down keys.
	 *
	 * Note that this view is not usually focused, so the Activity should call this directly.
	 */
	override fun onKeyDown(
		keyCode: Int,
		event: KeyEvent
	): Boolean {
		when (keyCode) {
			KeyEvent.KEYCODE_FOCUS, KeyEvent.KEYCODE_CAMERA ->
				// Handle these events so they don't launch the Camera app
				return true
			// Use volume up/down to turn on light
			KeyEvent.KEYCODE_VOLUME_DOWN -> {
				setTorchOff()
				return true
			}
			KeyEvent.KEYCODE_VOLUME_UP -> {
				setTorchOn()
				return true
			}
		}
		return super.onKeyDown(keyCode, event)
	}
	
}